# This viminfo file was generated by Vim 9.0.
# You may edit it if you're careful!

# Viminfo version
|1,4

# Value of 'encoding' when this file was written
*encoding=utf-8


# hlsearch on (H) or off (h):
~h
# Last Search Pattern:
~MSle0~/lo

# Last Substitute String:
$

# Command Line History (newest to oldest):
:wq
|2,0,1678186343,,"wq"
:q!
|2,0,1678186176,,"q!"
:w
|2,0,1678185007,,"w"
:set number
|2,0,1678182965,,"set number"
:se number
|2,0,1678182862,,"se number"
:set enum
|2,0,1678182833,,"set enum"
:q
|2,0,1678118581,,"q"
:get num
|2,0,1678092578,,"get num"
:set nu
|2,0,1677855216,,"set nu"
::wq
|2,0,1677777242,,":wq"
:Wq
|2,0,1677587759,,"Wq"

# Search String History (newest to oldest):
?/lo
|2,1,1678182338,47,"lo"
? \<root\>
|2,1,1678181182,,"\\<root\\>"
?/obj
|2,1,1678178723,47,"obj"
?/getF
|2,1,1678103815,47,"getF"
??getF
|2,1,1678103808,63,"getF"
? \<iptables\>
|2,1,1678095669,,"\\<iptables\\>"
? \<ip_addresses\>
|2,1,1677846174,,"\\<ip_addresses\\>"
? \<grep\>
|2,1,1677832037,,"\\<grep\\>"
?/relayh
|2,1,1677747482,47,"relayh"
?/home_
|2,1,1677747327,47,"home_"
?/127
|2,1,1677585192,47,"127"
??host
|2,1,1677585109,63,"host"
?/host
|2,1,1677585073,47,"host"
?/local
|2,1,1677585063,47,"local"
? @$
|2,1,1677580146,,"@$"

# Expression History (newest to oldest):

# Input Line History (newest to oldest):

# Debug Line History (newest to oldest):

# Registers:
"1	LINE	0
	#!/usr/bin/env python3
	import sys
	import re
	import subprocess
	
	logFail = "getFailedLog"
	file_to_check = "test1"
	output_file= "ips.txt"
	
	
	# Open the output file in append  mode to add new ip at the end of the file
	with open(output_file, "a") as output_file_obj:
	    #read output file into a set
	    # Open the input file in read mode
	    with open(file_to_check, "r") as input_file:
	        current_ip = None
	        consecutive_count = 0
	        
	        #close the output before reopening in read mode
	        output_file_obj.close()
	        with open(output_file, "r") as output_file_obj:
	            existing_ips = set(output_file_obj.read().splitlines())
	
	
	        for line in input_file:
	            ip_match = re.search(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", line)
	
	            if ip_match:
	                ip = ip_match.group()
	
	                # If this is the same IP as the last line, increment the count
	                if ip == current_ip:
	                    consecutive_count += 1
	                # Otherwise, reset the count and update the current IP
	                else:
	                    current_ip = ip
	                    consecutive_count = 1
	
	                # Check if we have three or more consecutive lines with the same IP
	                if consecutive_count >= 3:
	                    #check if file is already in the outputfile
	
	                    if ip not in existing_ips:    
	                        #write the ip not already in the output
	                        output_file_obj = open(output_file, "a")
	                        output_file_obj.write(ip + "\n")
	                      
	                        #add ip to the set
	                        existing_ips.add(ip)
	
|3,0,1,1,50,0,1678186298,"#!/usr/bin/env python3","import sys","import re","import subprocess","","logFail = \"getFailedLog\"","file_to_check = \"test1\"","output_file= \"ips.txt\"","","","# Open the output file in append  mode to add new ip at the end of the file","with open(output_file, \"a\") as output_file_obj:","    #read output file into a set","    # Open the input file in read mode","    with open(file_to_check, \"r\") as input_file:",>27
|<"        current_ip = None","        consecutive_count = 0","        ","        #close the output before reopening in read mode","        output_file_obj.close()","        with open(output_file, \"r\") as output_file_obj:","            existing_ips = set(output_file_obj.read().splitlines())","","","        for line in input_file:","            ip_match = re.search(r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", line)","","            if ip_match:",>39
|<"                ip = ip_match.group()","","                # If this is the same IP as the last line, increment the count","                if ip == current_ip:","                    consecutive_count += 1","                # Otherwise, reset the count and update the current IP","                else:","                    current_ip = ip","                    consecutive_count = 1","","                # Check if we have three or more consecutive lines with the same IP",>44
|<"                if consecutive_count >= 3:","                    #check if file is already in the outputfile","","                    if ip not in existing_ips:    ","                        #write the ip not already in the output","                        output_file_obj = open(output_file, \"a\")","                        output_file_obj.write(ip + \"\\n\")","                      ","                        #add ip to the set","                        existing_ips.add(ip)",""
"2	LINE	0
	#!/usr/bin/env python3
	import sys
	import re
	import subprocess
	
	logFail = "getFailedLog"
	file_to_check = "test1"
	output_file= "ips.txt"
	
	
	# Open the output file in append  mode to add new ip at the end of the file
	with open(output_file, "a") as output_file_obj:
	    #read output file into a set
	    # Open the input file in read mode
	    with open(file_to_check, "r") as input_file:
	        current_ip = None
	        consecutive_count = 0
	        
	        #close the output before reopening in read mode
	        output_file_obj.close()
	        with open(output_file, "r") as output_file_obj:
	            existing_ips = set(output_file_obj.read().splitlines())
	
	
	        for line in input_file:
	            ip_match = re.search(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", line)
	
	            if ip_match:
	                ip = ip_match.group()
	
	                # If this is the same IP as the last line, increment the count
	                if ip == current_ip:
	                    consecutive_count += 1
	                # Otherwise, reset the count and update the current IP
	                else:
	                    current_ip = ip
	                    consecutive_count = 1
	
	                # Check if we have three or more consecutive lines with the same IP
	                if consecutive_count >= 3:
	                    #check if file is already in the outputfile
	
	                    if ip not in existing_ips:    
	                        #write the ip not already in the output
	                        output_file_obj = open(output_file, "a")
	                        output_file_obj.write(ip + "\n")
	                      
	                        #add ip to the set
	                        existing_ips.add(ip)
	
|3,0,2,1,50,0,1678186170,"#!/usr/bin/env python3","import sys","import re","import subprocess","","logFail = \"getFailedLog\"","file_to_check = \"test1\"","output_file= \"ips.txt\"","","","# Open the output file in append  mode to add new ip at the end of the file","with open(output_file, \"a\") as output_file_obj:","    #read output file into a set","    # Open the input file in read mode","    with open(file_to_check, \"r\") as input_file:",>27
|<"        current_ip = None","        consecutive_count = 0","        ","        #close the output before reopening in read mode","        output_file_obj.close()","        with open(output_file, \"r\") as output_file_obj:","            existing_ips = set(output_file_obj.read().splitlines())","","","        for line in input_file:","            ip_match = re.search(r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", line)","","            if ip_match:",>39
|<"                ip = ip_match.group()","","                # If this is the same IP as the last line, increment the count","                if ip == current_ip:","                    consecutive_count += 1","                # Otherwise, reset the count and update the current IP","                else:","                    current_ip = ip","                    consecutive_count = 1","","                # Check if we have three or more consecutive lines with the same IP",>44
|<"                if consecutive_count >= 3:","                    #check if file is already in the outputfile","","                    if ip not in existing_ips:    ","                        #write the ip not already in the output","                        output_file_obj = open(output_file, \"a\")","                        output_file_obj.write(ip + \"\\n\")","                      ","                        #add ip to the set","                        existing_ips.add(ip)",""
"3	LINE	0
	#!/usr/bin/env python3
	import sys
	import re
	import subprocess
	
	logFail = "getFailedLog"
	file_to_check = "test1"
	output_file= "ips.txt"
	
	# Load the list of IP addresses from the output file
	with open(output_file, 'r') as ofo:
	    ips_list = [line.strip() for line in ofo]
	
	# Open the output file in append mode to preserve its previous contents
	with open(output_file, "a") as output_file_obj:
	    # Open the input file in read mode
	    with open(file_to_check, "r") as input_file:
	        current_ip = None
	        consecutive_count = 0
	        for line in input_file:
	            ip_match = re.search(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", line)
	
	            if ip_match:
	                ip = ip_match.group()
	
	                # If this is the same IP as the last line, increment the count
	                if ip == current_ip:
	                    consecutive_count += 1
	                # Otherwise, reset the count and update the current IP
	                else:
	                    current_ip = ip
	                    consecutive_count = 1
	
	                # Check if we have three or more consecutive lines with the same IP
	                if consecutive_count >= 3:
	                    if ip not in ips_list:
	                        # Write the matched IP to the output file
	                        output_file_obj.write(ip + "\n")
	                        ips_list.append(ip)
	    
	                    # Reset the consecutive count to start from the first different IP
	                    while True:
	                        next_line = input_file.readline()
	                        next_ip_match = re.search(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", next_line)
	                        if next_ip_match and next_ip_match.group() == ip:
	                            continue
	                        else:
	                            current_ip = next_ip_match.group() if next_ip_match else None
	                            consecutive_count = 1
	                            break
|3,0,3,1,50,0,1678182672,"#!/usr/bin/env python3","import sys","import re","import subprocess","","logFail = \"getFailedLog\"","file_to_check = \"test1\"","output_file= \"ips.txt\"","","# Load the list of IP addresses from the output file","with open(output_file, 'r') as ofo:","    ips_list = [line.strip() for line in ofo]","","# Open the output file in append mode to preserve its previous contents","with open(output_file, \"a\") as output_file_obj:",>40
|<"    # Open the input file in read mode","    with open(file_to_check, \"r\") as input_file:","        current_ip = None","        consecutive_count = 0","        for line in input_file:","            ip_match = re.search(r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", line)","","            if ip_match:","                ip = ip_match.group()","","                # If this is the same IP as the last line, increment the count","                if ip == current_ip:",>44
|<"                    consecutive_count += 1","                # Otherwise, reset the count and update the current IP","                else:","                    current_ip = ip","                    consecutive_count = 1","","                # Check if we have three or more consecutive lines with the same IP","                if consecutive_count >= 3:","                    if ip not in ips_list:","                        # Write the matched IP to the output file",>61
|<"                        output_file_obj.write(ip + \"\\n\")","                        ips_list.append(ip)","    ","                    # Reset the consecutive count to start from the first different IP","                    while True:","                        next_line = input_file.readline()","                        next_ip_match = re.search(r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", next_line)","                        if next_ip_match and next_ip_match.group() == ip:",>38
|<"                            continue","                        else:","                            current_ip = next_ip_match.group() if next_ip_match else None","                            consecutive_count = 1","                            break"
"4	LINE	0
	#!/usr/bin/env python3
	import sys
	import re
	import subprocess
	
	logFail = "getFailedLog"
	file_to_check = "test1"
	output_file= "ips.txt"
	
	# Load the list of IP addresses from the output file
	with open(output_file, 'r') as ofo:
	    ips_list = [line.strip() for line in ofo]
	
	# Open the output file in append mode to preserve its previous contents
	with open(output_file, "a") as output_file_obj:
	    # Open the input file in read mode
	    with open(file_to_check, "r") as input_file:
	        current_ip = None
	        consecutive_count = 0
	        for line in input_file:
	            ip_match = re.search(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", line)
	
	            if ip_match:
	                ip = ip_match.group()
	
	                # If this is the same IP as the last line, increment the count
	                if ip == current_ip:
	                    consecutive_count += 1
	                # Otherwise, reset the count and update the current IP
	                else:
	                    current_ip = ip
	                    consecutive_count = 1
	
	                # Check if we have three or more consecutive lines with the same IP
	                if consecutive_count >= 3:
	                    if ip not in ips_list:
	                        # Write the matched IP to the output file
	                        output_file_obj.write(ip + "\n")
	                        ips_list.append(ip)
	    
	                    # Reset the consecutive count to start from the first different IP
	                    while True:
	                        next_line = input_file.readline()
	                        next_ip_match = re.search(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", next_line)
	                        if next_ip_match and next_ip_match.group() == ip:
	                            continue
	                        else:
	                            current_ip = next_ip_match.group() if next_ip_match else None
	                            consecutive_count = 1
	                            break
|3,0,4,1,50,0,1678182605,"#!/usr/bin/env python3","import sys","import re","import subprocess","","logFail = \"getFailedLog\"","file_to_check = \"test1\"","output_file= \"ips.txt\"","","# Load the list of IP addresses from the output file","with open(output_file, 'r') as ofo:","    ips_list = [line.strip() for line in ofo]","","# Open the output file in append mode to preserve its previous contents","with open(output_file, \"a\") as output_file_obj:",>40
|<"    # Open the input file in read mode","    with open(file_to_check, \"r\") as input_file:","        current_ip = None","        consecutive_count = 0","        for line in input_file:","            ip_match = re.search(r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", line)","","            if ip_match:","                ip = ip_match.group()","","                # If this is the same IP as the last line, increment the count","                if ip == current_ip:",>44
|<"                    consecutive_count += 1","                # Otherwise, reset the count and update the current IP","                else:","                    current_ip = ip","                    consecutive_count = 1","","                # Check if we have three or more consecutive lines with the same IP","                if consecutive_count >= 3:","                    if ip not in ips_list:","                        # Write the matched IP to the output file",>61
|<"                        output_file_obj.write(ip + \"\\n\")","                        ips_list.append(ip)","    ","                    # Reset the consecutive count to start from the first different IP","                    while True:","                        next_line = input_file.readline()","                        next_ip_match = re.search(r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", next_line)","                        if next_ip_match and next_ip_match.group() == ip:",>38
|<"                            continue","                        else:","                            current_ip = next_ip_match.group() if next_ip_match else None","                            consecutive_count = 1","                            break"
"5	LINE	0
	#!/usr/bin/env python3
	import sys
	import re
	import subprocess
	
	logFail = "getFailedLog"
	file_to_check = "test1"
	output_file= "ips.txt"
	
	with open(output_file, 'r') as ofo:
	    ips_list= ofo.read();
	
	# Open the output file in write mode to overwrite the previous contents
	with open(output_file, "w") as output_file_obj:
	    # Open the input file in read mode
	    with open(file_to_check, "r") as input_file:
	        current_ip = None
	        consecutive_count = 0
	        for line in input_file:
	            ip_match = re.search(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", line)
	
	            if ip_match:
	                ip = ip_match.group()
	
	                # If this is the same IP as the last line, increment the count
	                if ip == current_ip:
	                    consecutive_count += 1
	                # Otherwise, reset the count and update the current IP
	                else:
	                    current_ip = ip
	                    consecutive_count = 1
	
	                # Check if we have three or more consecutive lines with the same IP
	                if consecutive_count >= 3:
	                    if not ip in ips_list:
	                   # Write the matched IP to the output file
	                        output_file_obj.write(ip + "\n")
	
	                    # Reset the consecutive count to start from the first different IP
	                    while True:
	                        next_line = input_file.readline()
	                        next_ip_match = re.search(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", next_line)
	                        if next_ip_match and next_ip_match.group() == ip:
	                            continue
	                        else:
	                            current_ip = next_ip_match.group() if next_ip_match else None
	                            consecutive_count = 1
	                            break
	
|3,0,5,1,49,0,1678182069,"#!/usr/bin/env python3","import sys","import re","import subprocess","","logFail = \"getFailedLog\"","file_to_check = \"test1\"","output_file= \"ips.txt\"","","with open(output_file, 'r') as ofo:","    ips_list= ofo.read();","","# Open the output file in write mode to overwrite the previous contents","with open(output_file, \"w\") as output_file_obj:","    # Open the input file in read mode",>52
|<"    with open(file_to_check, \"r\") as input_file:","        current_ip = None","        consecutive_count = 0","        for line in input_file:","            ip_match = re.search(r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", line)","","            if ip_match:","                ip = ip_match.group()","","                # If this is the same IP as the last line, increment the count","                if ip == current_ip:","                    consecutive_count += 1",>72
|<"                # Otherwise, reset the count and update the current IP","                else:","                    current_ip = ip","                    consecutive_count = 1","","                # Check if we have three or more consecutive lines with the same IP","                if consecutive_count >= 3:","                    if not ip in ips_list:","                   # Write the matched IP to the output file","                        output_file_obj.write(ip + \"\\n\")","",>88
|<"                    # Reset the consecutive count to start from the first different IP","                    while True:","                        next_line = input_file.readline()","                        next_ip_match = re.search(r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", next_line)","                        if next_ip_match and next_ip_match.group() == ip:","                            continue","                        else:",>91
|<"                            current_ip = next_ip_match.group() if next_ip_match else None","                            consecutive_count = 1","                            break",""
"6	LINE	0
	#! /bin/bash
	
	
	#grep -Eo '\s([0-9]+\.){3}[0-9]+\s' getFailedLog > ~/test
	#genera file dove ogni riga rappresenta ip e ora, di ogni tentativo fallito di log
	awk '{print $1, $2, $3, $(NF-3)}' getFailedLog > ~/test1
	#how to get the $ line where dollar means last line in this case, by putting a number you'll get that line of theat file
	#sed '$!d' test1
	#get the var value line. es var = 5 it return the 5th line
	#sed "${var}q;d" test1
	#get number of lines
	#wc test1 | awk '{print $1}'
	
	#for to check if 3 ip on a row failed to log
	#n='1'
	
	#for n in $(wc test1 | awk '{print $1}')
	#do
	#	if[$(sed "${n}q;d" test1)]==[$(sed "${((++n))}q;d" test1)]&&==[$(sed "${((n +=2))}q;d" test1)]
	#	then
	#		echo " $(sed "${n}q;d" test1 | awk '{print $NF}') ha fallito 3 accessi consecutivi" | mail -s "Alert failed login " s.ligorio@innovativity.it
	
	#done
	
	
	
	
	
	#echo " $ip ha fallito 3 accessi consecutivi" | mail -s "Alert failed login " s.ligorio@innovativity.it
	
	#iptables -A INPUT -s $ip -j DROP
|3,0,6,1,31,0,1678098402,"#! /bin/bash","","","#grep -Eo '\\s([0-9]+\\.){3}[0-9]+\\s' getFailedLog > ~/test","#genera file dove ogni riga rappresenta ip e ora, di ogni tentativo fallito di log","awk '{print $1, $2, $3, $(NF-3)}' getFailedLog > ~/test1","#how to get the $ line where dollar means last line in this case, by putting a number you'll get that line of theat file","#sed '$!d' test1","#get the var value line. es var = 5 it return the 5th line",>26
|<"#sed \"${var}q;d\" test1","#get number of lines","#wc test1 | awk '{print $1}'","","#for to check if 3 ip on a row failed to log","#n='1'","","#for n in $(wc test1 | awk '{print $1}')","#do","#	if[$(sed \"${n}q;d\" test1)]==[$(sed \"${((++n))}q;d\" test1)]&&==[$(sed \"${((n +=2))}q;d\" test1)]","#	then","#		echo \" $(sed \"${n}q;d\" test1 | awk '{print $NF}') ha fallito 3 accessi consecutivi\" | mail -s \"Alert failed login \" s.ligorio@innovativity.it","","#done","","","","","",>109
|<"#echo \" $ip ha fallito 3 accessi consecutivi\" | mail -s \"Alert failed login \" s.ligorio@innovativity.it","","#iptables -A INPUT -s $ip -j DROP"
"7	LINE	0
	#!/bin/bash
	
	# Set variables for the email
	recipient="s.ligorio@innovativity.it"
	subject="Alert: 3 failed log in a row"
	body=""
	
	# Loop through the file and send an email for each line
	while read line; do
	            # Set the body of the email to the current line
	                body="$line"
	
	                    # Send the email
	                        echo "$body" | mail -s "$subject" "$recipient"
	                done < ips.txt
	~                             
|3,0,7,1,16,0,1678095275,"#!/bin/bash","","# Set variables for the email","recipient=\"s.ligorio@innovativity.it\"","subject=\"Alert: 3 failed log in a row\"","body=\"\"","","# Loop through the file and send an email for each line","while read line; do","            # Set the body of the email to the current line","                body=\"$line\"","","                    # Send the email",>78
|<"                        echo \"$body\" | mail -s \"$subject\" \"$recipient\"","                done < ips.txt","~                             "
"8	LINE	0
	#!/bin/bash
	
	# Set variables for the email
	recipient="s.ligorio@innovativity.it"
	subject="Alert: 3 failed log in a row"
	body=""
	
	# Loop through the file and send an email for each line
	while read line; do
		    # Set the body of the email to the current line
		        body="$line"
	
			    # Send the email
			        echo "$body" | mail -s "$subject" "$recipient"
			done < ips.txt
|3,0,8,1,15,0,1678095270,"#!/bin/bash","","# Set variables for the email","recipient=\"s.ligorio@innovativity.it\"","subject=\"Alert: 3 failed log in a row\"","body=\"\"","","# Loop through the file and send an email for each line","while read line; do","	    # Set the body of the email to the current line","	        body=\"$line\"","","		    # Send the email","		        echo \"$body\" | mail -s \"$subject\" \"$recipient\"","		done < ips.txt"
"9	LINE	0
	#!/usr/bin/env python3
	import datetime
	input_file = "test1"
	output_file = "ipsDate.txt"
	with open(input_file, "r") as f, open(output_file, "w") as out:
	    last_login = {}
	    for line in f:
	        data = line.strip().split()
	        timestamp_str = " ".join(data[:3])
	        ip = data[3]
	        timestamp = datetime.datetime.strptime(timestamp_str, '%b %d %H:%M:%S')
	        if ip in last_login:
	            if (timestamp - last_login[ip]['time']).total_seconds() <= 120:
	                last_login[ip]['count'] += 1
	                if last_login[ip]['count'] > 5:
	                    out.write(ip + '\n'+timestamp_str)
	            else:
	                last_login[ip] = {'time': timestamp, 'count': 1}
	        else:
	            last_login[ip] = {'time': timestamp, 'count': 1}
|3,0,9,1,20,0,1678094637,"#!/usr/bin/env python3","import datetime","input_file = \"test1\"","output_file = \"ipsDate.txt\"","with open(input_file, \"r\") as f, open(output_file, \"w\") as out:","    last_login = {}","    for line in f:","        data = line.strip().split()","        timestamp_str = \" \".join(data[:3])","        ip = data[3]","        timestamp = datetime.datetime.strptime(timestamp_str, '%b %d %H:%M:%S')","        if ip in last_login:",>77
|<"            if (timestamp - last_login[ip]['time']).total_seconds() <= 120:","                last_login[ip]['count'] += 1","                if last_login[ip]['count'] > 5:","                    out.write(ip + '\\n'+timestamp_str)","            else:","                last_login[ip] = {'time': timestamp, 'count': 1}","        else:","            last_login[ip] = {'time': timestamp, 'count': 1}"
""-	CHAR	0
	i
|3,1,36,0,1,0,1678186340,"i"

# File marks:
'0  31  19  ~/getIP.py
|4,48,31,19,1678186343,"~/getIP.py"
'1  44  32  ~/getIP.py
|4,49,44,32,1678186313,"~/getIP.py"
'2  44  32  ~/getIP.py
|4,50,44,32,1678186313,"~/getIP.py"
'3  1  0  ~/getIP.py
|4,51,1,0,1678186176,"~/getIP.py"
'4  1  0  ~/getIP.py
|4,52,1,0,1678186176,"~/getIP.py"
'5  1  0  ~/getIP.py
|4,53,1,0,1678186176,"~/getIP.py"
'6  1  0  ~/getIP.py
|4,54,1,0,1678186176,"~/getIP.py"
'7  1  0  ~/getIP.py
|4,55,1,0,1678186027,"~/getIP.py"
'8  61  0  ~/getIP.py
|4,56,61,0,1678186027,"~/getIP.py"
'9  1  0  ~/getIP.py
|4,57,1,0,1678186027,"~/getIP.py"

# Jumplist (newest first):
-'  31  19  ~/getIP.py
|4,39,31,19,1678186343,"~/getIP.py"
-'  44  32  ~/getIP.py
|4,39,44,32,1678186329,"~/getIP.py"
-'  44  32  ~/getIP.py
|4,39,44,32,1678186313,"~/getIP.py"
-'  1  0  ~/getIP.py
|4,39,1,0,1678186298,"~/getIP.py"
-'  1  0  ~/getIP.py
|4,39,1,0,1678186298,"~/getIP.py"
-'  1  0  ~/getIP.py
|4,39,1,0,1678186176,"~/getIP.py"
-'  61  0  ~/getIP.py
|4,39,61,0,1678186027,"~/getIP.py"
-'  61  0  ~/getIP.py
|4,39,61,0,1678186027,"~/getIP.py"
-'  60  28  ~/getIP.py
|4,39,60,28,1678185626,"~/getIP.py"
-'  60  28  ~/getIP.py
|4,39,60,28,1678185626,"~/getIP.py"
-'  60  28  ~/getIP.py
|4,39,60,28,1678185495,"~/getIP.py"
-'  13  56  ~/getIP.py
|4,39,13,56,1678184812,"~/getIP.py"
-'  13  56  ~/getIP.py
|4,39,13,56,1678184812,"~/getIP.py"
-'  13  56  ~/getIP.py
|4,39,13,56,1678184812,"~/getIP.py"
-'  14  24  ~/getIP.py
|4,39,14,24,1678184469,"~/getIP.py"
-'  14  24  ~/getIP.py
|4,39,14,24,1678184469,"~/getIP.py"
-'  14  24  ~/getIP.py
|4,39,14,24,1678184469,"~/getIP.py"
-'  51  16  ~/getIP.py
|4,39,51,16,1678184437,"~/getIP.py"
-'  51  16  ~/getIP.py
|4,39,51,16,1678184437,"~/getIP.py"
-'  51  16  ~/getIP.py
|4,39,51,16,1678184437,"~/getIP.py"
-'  51  16  ~/getIP.py
|4,39,51,16,1678184393,"~/getIP.py"
-'  49  43  ~/getIP.py
|4,39,49,43,1678184303,"~/getIP.py"
-'  40  43  ~/getIP.py
|4,39,40,43,1678184303,"~/getIP.py"
-'  49  43  ~/getIP.py
|4,39,49,43,1678184303,"~/getIP.py"
-'  40  43  ~/getIP.py
|4,39,40,43,1678184303,"~/getIP.py"
-'  49  43  ~/getIP.py
|4,39,49,43,1678184303,"~/getIP.py"
-'  40  43  ~/getIP.py
|4,39,40,43,1678184303,"~/getIP.py"
-'  40  43  ~/getIP.py
|4,39,40,43,1678184303,"~/getIP.py"
-'  40  43  ~/getIP.py
|4,39,40,43,1678184286,"~/getIP.py"
-'  1  20  ~/getIP.py
|4,39,1,20,1678182899,"~/getIP.py"
-'  1  20  ~/getIP.py
|4,39,1,20,1678182899,"~/getIP.py"
-'  1  20  ~/getIP.py
|4,39,1,20,1678182899,"~/getIP.py"
-'  1  20  ~/getIP.py
|4,39,1,20,1678182899,"~/getIP.py"
-'  1  20  ~/getIP.py
|4,39,1,20,1678182899,"~/getIP.py"
-'  1  20  ~/getIP.py
|4,39,1,20,1678182895,"~/getIP.py"
-'  53  32  ~/getIP.py
|4,39,53,32,1678182815,"~/getIP.py"
-'  53  32  ~/getIP.py
|4,39,53,32,1678182815,"~/getIP.py"
-'  44  32  ~/getIP.py
|4,39,44,32,1678182815,"~/getIP.py"
-'  53  32  ~/getIP.py
|4,39,53,32,1678182815,"~/getIP.py"
-'  44  32  ~/getIP.py
|4,39,44,32,1678182815,"~/getIP.py"
-'  44  32  ~/getIP.py
|4,39,44,32,1678182815,"~/getIP.py"
-'  51  32  ~/getIP.py
|4,39,51,32,1678182815,"~/getIP.py"
-'  44  32  ~/getIP.py
|4,39,44,32,1678182815,"~/getIP.py"
-'  44  32  ~/getIP.py
|4,39,44,32,1678182678,"~/getIP.py"
-'  1  0  ~/getIP.py
|4,39,1,0,1678182672,"~/getIP.py"
-'  1  0  ~/getIP.py
|4,39,1,0,1678182627,"~/getIP.py"
-'  6  0  ~/getIP.py
|4,39,6,0,1678182085,"~/getIP.py"
-'  67  0  ~/getIP.py
|4,39,67,0,1678182085,"~/getIP.py"
-'  58  0  ~/getIP.py
|4,39,58,0,1678182085,"~/getIP.py"
-'  6  0  ~/getIP.py
|4,39,6,0,1678182085,"~/getIP.py"
-'  6  0  ~/getIP.py
|4,39,6,0,1678182085,"~/getIP.py"
-'  67  0  ~/getIP.py
|4,39,67,0,1678182085,"~/getIP.py"
-'  58  0  ~/getIP.py
|4,39,58,0,1678182085,"~/getIP.py"
-'  67  0  ~/getIP.py
|4,39,67,0,1678182085,"~/getIP.py"
-'  58  0  ~/getIP.py
|4,39,58,0,1678182085,"~/getIP.py"
-'  58  0  ~/getIP.py
|4,39,58,0,1678182085,"~/getIP.py"
-'  58  0  ~/getIP.py
|4,39,58,0,1678182085,"~/getIP.py"
-'  51  0  ~/getIP.py
|4,39,51,0,1678182085,"~/getIP.py"
-'  51  0  ~/getIP.py
|4,39,51,0,1678182085,"~/getIP.py"
-'  1  0  ~/getIP.py
|4,39,1,0,1678182069,"~/getIP.py"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"
-'  27  0  /tmp/crontab.19Dyv2/crontab
|4,39,27,0,1678181190,"/tmp/crontab.19Dyv2/crontab"

# History of marks within files (newest to oldest):

> ~/getIP.py
	*	1678186341	0
	"	31	19
	^	44	33
	.	31	20
	+	1	0
	+	1	10
	+	1	45
	+	1	21
	+	1	49
	+	1	10
	+	1	45
	+	1	22
	+	1	33
	+	1	0
	+	1	21
	+	1	41
	+	1	0
	+	1	23
	+	1	35
	+	1	24
	+	1	30
	+	1	0
	+	1	41
	+	1	22
	+	1	32
	+	1	19
	+	1	25
	+	1	0
	+	1	42
	+	1	75
	+	1	24
	+	1	0
	+	1	63
	+	1	56
	+	1	20
	+	1	0
	+	1	90
	+	1	23
	+	1	20
	+	1	45
	+	1	56
	+	1	43
	+	1	16
	+	1	17
	+	1	32
	+	1	1
	+	1	0
	+	1	66
	+	1	0
	+	1	1
	+	1	64
	+	1	22
	+	1	28
	+	1	22
	+	44	32
	+	31	20

> /tmp/crontab.19Dyv2/crontab
	*	1678181189	0
	"	27	0
	^	27	1
	.	27	0
	+	27	0

> /tmp/crontab.BwqBWJ/crontab
	*	1678180968	0
	"	27	1
	^	27	2
	.	27	2
	+	27	2

> ~/sendMail.sh
	*	1678118564	0
	"	4	19
	^	4	20
	.	4	19
	+	1	17
	+	1	0
	+	1	35
	+	1	36
	+	1	0
	+	1	11
	+	10	584
	+	5	78
	+	9	289
	+	9	272
	+	9	214
	+	10	354
	+	9	467
	+	17	29
	+	11	22
	+	10	3
	+	10	0
	+	16	74
	+	18	0
	+	31	29
	+	28	98
	+	31	29
	+	17	7
	+	16	8
	+	13	9
	+	11	3
	+	28	123
	+	17	7
	+	16	7
	+	13	6
	+	12	12
	+	11	3
	+	19	4
	+	35	0
	+	33	7
	+	32	13
	+	33	11
	+	32	12
	+	33	12
	+	32	15
	+	33	15
	+	4	20
	+	26	125
	+	26	101
	+	33	22
	+	32	23
	+	26	172
	+	34	2
	+	26	112
	+	26	108
	+	26	114
	+	26	116
	+	28	0
	+	27	0
	+	28	3
	+	28	4
	+	28	12
	+	28	25
	+	8	0
	+	28	3
	+	26	2
	+	30	4
	+	30	16
	+	29	43
	+	30	45
	+	30	4
	+	29	15
	+	30	4
	+	30	16
	+	30	2
	+	30	20
	+	30	4
	+	34	0
	+	29	9
	+	30	4
	+	29	43
	+	4	19

> ~/getIPBYDATE.py
	*	1678118551	0
	"	6	18
	^	6	19
	.	6	18
	+	1	15
	+	1	27
	+	1	15
	+	11	34
	+	1	21
	+	6	11
	+	3	20
	+	4	25
	+	6	23
	+	11	7
	+	23	26
	+	7	0
	+	6	18

> /tmp/crontab.31u7Fz/crontab
	*	1678118395	0
	"	27	0
	^	27	1
	.	27	0
	+	27	0

> /tmp/crontab.yx8YLh/crontab
	*	1678118004	0
	"	1	0

> /tmp/crontab.HKyDRX/crontab
	*	1678117882	0
	"	17	0
	^	17	0

> /tmp/crontab.wyXtZa/crontab
	*	1678117494	0
	"	27	0
	.	27	0
	+	27	0

> /tmp/crontab.UA0EX5/crontab
	*	1678116277	0
	"	1	0

> /tmp/crontab.qCFnqO/crontab
	*	1678113036	0
	"	27	0
	^	27	1
	.	27	0
	+	27	0

> /tmp/crontab.OmzTpl/crontab
	*	1678112520	0
	"	26	27
	^	26	28
	.	26	27
	+	26	27

> /tmp/crontab.HAddvj/crontab
	*	1678112440	0
	"	1	0

> /tmp/crontab.thJHNx/crontab
	*	1678112414	0
	"	25	16
	^	25	17
	.	25	16
	+	27	15
	+	26	15
	+	25	16

> /tmp/crontab.bPlh8Z/crontab
	*	1678112112	0
	"	27	1
	^	27	2
	.	27	2
	+	27	2

> /tmp/crontab.rRMSqI/crontab
	*	1678111966	0
	"	27	22
	^	27	23
	.	27	22
	+	25	20
	+	27	24
	+	27	22

> /tmp/crontab.c2AH1k/crontab
	*	1678105794	0
	"	1	0

> /tmp/crontab.KPujWe/crontab
	*	1678104266	0
	"	1	0

> /tmp/crontab.1U9Gwl/crontab
	*	1678102607	0
	"	24	3
	^	24	4
	.	24	0
	+	24	120
	+	24	0

> /tmp/crontab.eN2GAP/crontab
	*	1678102561	0
	"	25	0
	^	25	0
	.	24	120
	+	24	120

> /tmp/crontab.EaR7NV/crontab
	*	1678102524	0
	"	25	0
	^	25	0
	.	24	120
	+	24	120

> /tmp/crontab.hUCyXi/crontab
	*	1678102330	0
	"	1	0

> /tmp/crontab.Wl9pKr/crontab
	*	1678102286	0
	"	24	88
	^	24	89
	.	24	88
	+	24	88

> /tmp/crontab.xLvbib/crontab
	*	1678101231	0
	"	25	0
	^	25	0
	.	24	122
	+	24	122

> /tmp/crontab.YXhD2C/crontab
	*	1678101198	0
	"	24	8
	^	24	9
	.	24	9
	+	24	9

> /tmp/crontab.eIHPrq/crontab
	*	1678100987	0
	"	24	112
	^	24	113
	.	24	113
	+	24	113

> /tmp/crontab.DjHuBN/crontab
	*	1678100758	0
	"	1	0

> /tmp/crontab.d3XCf7/crontab
	*	1678100460	0
	"	1	0

> ~/prova.py
	*	1678100088	0
	"	1	21
	^	37	45
	.	1	0
	+	1	1186
	+	1	128
	+	1	152
	+	1	376
	+	1	80
	+	1	1145
	+	1	133
	+	38	81
	+	9	23
	+	14	45
	+	31	34
	+	35	15
	+	38	44
	+	40	0
	+	38	19
	+	12	0
	+	39	19
	+	38	44
	+	14	36
	+	38	20
	+	37	44
	+	1	0

> /tmp/crontab.0OuWlH/crontab
	*	1678100019	0
	"	24	64
	^	24	65
	.	24	64
	+	24	64

> /tmp/crontab.euFAOZ/crontab
	*	1678098916	0
	"	1	0

> /tmp/crontab.4kII3P/crontab
	*	1678098637	0
	"	1	0

> /tmp/crontab.0HtU0R/crontab
	*	1678098567	0
	"	1	0

> /tmp/crontab.1jY84D/crontab
	*	1678098490	0
	"	1	0

> ~/test.sh
	*	1678098414	0
	"	3	0
	^	3	0
	.	2	56
	+	1	29
	+	1	0
	+	1	32
	+	1	81
	+	1	98
	+	1	0
	+	1	83
	+	2	56

> ~/test.py
	*	1677861299	0
	"	37	0
	^	1	0
	.	34	43
	+	1	25
	+	1	31
	+	1	33
	+	39	44
	+	6	16
	+	32	111
	+	32	127
	+	32	36
	+	10	67
	+	32	45
	+	32	135
	+	32	18
	+	32	5
	+	32	33
	+	32	14
	+	8	17
	+	10	0
	+	8	17
	+	9	0
	+	8	23
	+	10	40
	+	32	99
	+	32	57
	+	32	18
	+	12	50
	+	13	43
	+	21	46
	+	32	4
	+	21	45
	+	9	43
	+	32	111
	+	32	2
	+	18	3
	+	18	17
	+	16	22
	+	15	33
	+	22	8
	+	31	61
	+	27	58
	+	28	69
	+	32	0
	+	38	40
	+	33	136
	+	39	4
	+	24	17
	+	41	36
	+	39	11
	+	40	15
	+	41	15
	+	13	0
	+	14	0
	+	15	36
	+	19	25
	+	16	9
	+	19	23
	+	12	0
	+	16	0
	+	6	7
	+	36	40
	+	6	17
	+	28	140
	+	6	17
	+	8	17
	+	33	144
	+	33	37
	+	33	30
	+	33	31
	+	16	10
	+	13	0
	+	12	0
	+	13	49
	+	34	43

> ~/test.ph
	*	1677855074	0
	"	1	0

> /tmp/crontab.Zfqh89/crontab
	*	1677849562	0
	"	25	0
	^	25	0
	.	24	79
	+	24	79

> /tmp/crontab.WwQsV4/crontab
	*	1677849411	0
	"	24	64
	^	24	65
	.	24	64
	+	24	64

> /tmp/crontab.ttAkGy/crontab
	*	1677849286	0
	"	25	0
	^	25	0
	.	24	85
	+	24	85

> /tmp/crontab.Hybwz1/crontab
	*	1677849177	0
	"	24	88
	^	24	89
	.	24	88
	+	24	88

> /tmp/crontab.uWsL4k/crontab
	*	1677849018	0
	"	24	29
	^	24	30
	.	24	86
	+	24	86

> /etc/ssh/sshd_config
	*	1677838212	0
	"	1	0
	^	82	24
	.	60	24
	+	60	24

> /etc/postfix/main.cf
	*	1677838212	0
	"	46	19
	^	47	0
	.	45	30
	+	37	35
	+	41	20
	+	42	11
	+	41	19
	+	42	39
	+	51	52
	+	37	35
	+	49	56
	+	45	30

> /tmp/crontab.il3gFW/crontab
	*	1677837135	0
	"	1	0

> /tmp/crontab.q3lzR7/crontab
	*	1677777972	0
	"	1	0

> /etc/anacrontab
	*	1677774700	0
	"	13	0
	^	13	0
	.	12	61
	+	12	61

> /tmp/crontab.q4TRrG/crontab
	*	1677773406	0
	"	24	64
	^	24	65
	.	24	64
	+	24	64

> /tmp/crontab.TvrqSD/crontab
	*	1677772910	0
	"	24	43
	.	24	54
	+	24	54

> /tmp/crontab.ATVXpu/crontab
	*	1677772588	0
	"	24	28
	.	24	28
	+	24	28

> ~/getFailedAuth.sh
	*	1677771984	0
	"	13	36
	^	13	37
	.	13	36
	+	17	3
	+	13	23
	+	14	35
	+	15	0
	+	13	22
	+	15	8
	+	13	36

> ~/getFailedAuth.pyz
	*	1677771557	0
	"	2	0
	^	2	0
	.	1	21
	+	1	21

> ~/checkFailAuth.sh
	*	1677769944	0
	"	3	7
	^	3	8
	.	3	7
	+	8	1
	+	3	7

> /etc/profile
	*	1677758675	0
	"	43	34
	^	43	35
	.	43	35
	+	37	1
	+	35	55
	+	47	1
	+	38	0
	+	47	0
	+	43	35

> /etc/aliases
	*	1677756761	0
	"	3	14
	^	3	15
	.	3	13
	+	3	13

> ~/.ssh/authorized_keys
	*	1677755229	0
	"	4	84
	^	4	85
	.	4	84
	+	2	0
	+	2	128
	+	4	0
	+	3	743
	+	2	4
	+	3	742
	+	2	403
	+	4	84

> /etc/ssmtp/ssmtp.conf
	*	1677751539	0
	"	11	20
	^	11	21
	.	11	21
	+	14	43
	+	11	24
	+	12	32
	+	8	60
	+	2	18
	+	6	5
	+	25	0
	+	24	0
	+	6	36
	+	17	29
	+	20	29
	+	13	15
	+	6	17
	+	11	21

> /etc/ssmtp/revaliases
	*	1677749909	0
	"	1	0

> /etc/postfix/sasl_password
	*	1677748866	0
	"	1	44
	^	1	45
	.	1	44
	+	1	44

> /etc/apache2/sites-available/000-default.conf
	*	1677668264	0
	"	13	0

> /etc/apache2/sites-available/samueletest.invty-le-ssl.conf
	*	1677600402	0
	"	4	1
	^	4	2
	.	4	1
	+	4	1

> /etc/apache2/apache2.conf
	*	1677588934	0
	"	10	0

> /etc/hosts
	*	1677587797	0
	"	10	0
	^	12	0
	.	10	0
	+	10	30
	+	11	0
	+	10	0

> /etc/apache2/sites-enabled/samueletest.invty.conf
	*	1677587505	0
	"	3	1
	^	3	2
	.	3	1
	+	4	22
	+	3	1

> /var/www/samueletest.invty/samueletest.invty.conf
	*	1677586834	0
	"	1	0

> /var/www/samueletest.invty/test.php
	*	1677586551	0
	"	3	1
	^	3	2
	.	3	1
	+	3	1

> /etc/apache2/samueletest.invty.conf
	*	1677583298	0
	"	3	36
	^	3	37
	.	3	36
	+	1	18
	+	10	13
	+	7	26
	+	6	26
	+	7	27
	+	6	53
	+	7	64
	+	2	31
	+	3	36

> /var/www/samueletest.invty/index.html
	*	1677580566	0
	"	1	34
	^	1	35
	.	1	34
	+	1	34

> /etc/apache2/sites-available/samueletest.invty.conf
	*	1677580566	0
	"	7	58
	^	7	59
	.	7	58
	+	10	13
	+	2	32
	+	4	44
	+	8	0
	+	7	58

> /var/www/html/index.html
	*	1677578558	0
	"	37	0

> /etc/apache2/sites-available/samuele.invty.conf
	*	1677576836	0
	"	1	0

> /var/www/html/samueletest.invty/index.html
	*	1677575079	0
	"	4	6
	^	4	7
	.	4	7
	+	1	28
	+	4	7
